DAY-3(LITERALS AND TYPECONVERSION)

Let's dive into literals, type casting, type conversion, and type promotion in Java. Grasping these concepts is essential for managing data types effectively and writing robust Java programs.

---

## **Literals in Java**

**Literals** are the fixed values that you assign to variables in your code. They represent the actual data the variable holds. Think of literals as the raw ingredients in your program—they're the numbers, characters, and strings that give meaning to your code.

### **Types of Literals**

1. **Integer Literals:**
   - Represent whole numbers without decimals.
   - Default type is `int`, but can specify `long` with an `L` or `l`.
   - **Examples:**
     ```java
     int decimal = 42;        // Decimal integer
     int octal = 052;         // Octal integer (starts with 0)
     int hexadecimal = 0x2A;  // Hexadecimal integer (starts with 0x)
     int binary = 0b101010;   // Binary integer (starts with 0b)
     long bigNumber = 123456789L;
     ```

2. **Floating-Point Literals:**
   - Represent numbers with fractional parts.
   - Default type is `double`.
   - Append `F` or `f` for `float` type.
   - **Examples:**
     ```java
     double pi = 3.1415;
     float gravity = 9.81F;
     ```

3. **Character Literals:**
   - Single characters enclosed in single quotes.
   - Can represent ASCII or Unicode characters.
   - **Examples:**
     ```java
     char letter = 'A';
     char digit = '7';
     char symbol = '#';
     char unicodeChar = '\u0041'; // Unicode for 'A'
     ```

4. **String Literals:**
   - Sequence of characters enclosed in double quotes.
   - Used widely in displaying messages and data.
   - **Examples:**
     ```java
     String greeting = "Hello, World!";
     String empty = "";
     ```

5. **Boolean Literals:**
   - Represent one of two values: `true` or `false`.
   - **Examples:**
     ```java
     boolean isJavaFun = true;
     boolean isFishTasty = false;
     ```

6. **Null Literal:**
   - Special literal for reference types to indicate no value.
   - **Example:**
     ```java
     String unknown = null;
     ```

---

## **Type Casting and Type Conversion**

**Type casting** and **type conversion** allow you to convert a variable from one data type to another. This is crucial when performing operations on variables of different types.

### **Implicit Type Conversion (Widening Conversion)**

- Occurs automatically when converting from a smaller to a larger type size.
- No data loss.
  
**Conversion Hierarchy:**

```
byte → short → int → long → float → double
```

**Example:**

```java
int integerNum = 100;
double doubleNum = integerNum; // int to double conversion
System.out.println(doubleNum); // Output: 100.0
```

### **Explicit Type Casting (Narrowing Conversion)**

- Required when converting from a larger to a smaller type size.
- May result in data loss.
- Syntax: `(targetType) value`

**Example:**

```java
double pi = 3.14159;
int intPi = (int) pi;
System.out.println(intPi); // Output: 3
```

In this example, the decimal part is truncated, demonstrating potential data loss.

### **Type Conversion between Reference Types**

- Involves upcasting and downcasting between class hierarchies.

**Upcasting (Implicit):**

- Casting a subclass to a superclass.
- Always safe.

**Example:**

```java
Animal animal = new Dog(); // Dog is a subclass of Animal
```

**Downcasting (Explicit):**

- Casting a superclass to a subclass.
- Requires explicit casting and can throw a `ClassCastException`.

**Example:**

```java
Animal animal = new Dog();
Dog dog = (Dog) animal;
```

---

## **Type Promotion in Expressions**

**Type promotion** occurs when operands of different types are used in an expression; Java automatically promotes smaller types to larger types to prevent data loss.

### **Promotion Rules:**

1. **Byte, Short, and Char to Int:**
   - When an arithmetic operation involves `byte`, `short`, or `char`, they are promoted to `int` before the operation.

2. **Operands Promotion:**
   - If one operand is `long`, the whole expression is promoted to `long`.
   - If one operand is `float`, the entire expression is promoted to `float`.
   - If any operand is `double`, the expression is promoted to `double`.

### **Examples:**

**1. Byte and Short Promotion:**

```java
byte a = 5;
byte b = 10;
// byte c = a + b; // Error: Result is int
int c = a + b; // Correct
```

Even though `a` and `b` are bytes, `a + b` results in an `int`. 

**2. Mixing Types:**

```java
int i = 100;
long l = 200L;
float f = 300.5F;
double d = 400.5;

double result = i + l * f / d;
```

- `l * f` promotes `long` to `float`.
- Division `/ d` promotes `float` to `double`.
- Addition with `i` promotes `int` to `double`.

---

## **Detailed Examples**

### **1. Casting Between Numeric Types**

**Implicit Casting (Widening):**

```java
int num = 50;
long bigNum = num; // int to long
float decimal = num; // int to float
double bigDecimal = bigNum; // long to double
```

**Explicit Casting (Narrowing):**

```java
double salary = 98765.43;
int intSalary = (int) salary; // double to int
System.out.println(intSalary); // Output: 98765
```

### **2. Char to Int Conversion**

```java
char letter = 'A';
int ascii = letter;
System.out.println(ascii); // Output: 65
```

### **3. Arithmetic Promotions**

```java
byte b = 42;
char c = 'a';
short s = 1024;
int i = 50000;
float f = 5.67f;
double d = .1234;

double result = (f * b) + (i / c) - (d * s);
System.out.println(result);
```

- `f * b` promotes `byte` to `float`.
- `i / c` promotes `char` to `int`.
- `d * s` promotes `short` to `double`.
- Final result is of type `double`.

### **4. Casting Objects in Inheritance**

Given a class hierarchy:

```java
class Animal { /* ... */ }
class Dog extends Animal { /* ... */ }
```

**Upcasting:**

```java
Dog dog = new Dog();
Animal animal = dog; // Upcasting Dog to Animal
```

**Downcasting:**

```java
Animal animal = new Dog();
Dog dog = (Dog) animal; // Downcasting back to Dog
```

---

## **Visual Representation**

### **Type Promotion Flow**

```
byte
  ↓
short
  ↓
char
  ↓
  int
   ↓
  long
   ↓
 float
   ↓
double
```

- **Note:** `char` does not get promoted to `short`; all three (`byte`, `short`, `char`) promote directly to `int`.

---

## **Why Understanding These Concepts Matters**

- **Prevent Data Loss:** Being mindful of type conversions helps avoid unintended data truncation or rounding errors.
  
- **Efficient Memory Usage:** Choosing appropriate data types optimizes memory consumption, crucial for large-scale applications.

- **Code Readability:** Clear casting and conversion make your code easier to understand and maintain.

- **Avoiding Errors:** Implicit promotions can sometimes introduce subtle bugs; explicit casting clarifies your intentions.

---

## **Additional Insights**

### **Autoboxing and Unboxing**

- Java automatically converts between primitives and their corresponding wrapper classes.

**Example:**

```java
List<Integer> numbers = new ArrayList<>();
numbers.add(5); // Autoboxing: int to Integer
int num = numbers.get(0); // Unboxing: Integer to int
```

### **String Conversion**

- Converting primitives to strings and vice versa.

**Primitive to String:**

```java
int num = 100;
String strNum = Integer.toString(num);
```

**String to Primitive:**

```java
String strNum = "100";
int num = Integer.parseInt(strNum);
```

### **Type Promotion in Methods**

- Method overloading can be affected by type promotion.

**Example:**

```java
void show(int x) {
    System.out.println("int");
}

void show(double x) {
    System.out.println("double");
}

show(10);    // Outputs: int
show(10.5);  // Outputs: double
show('A');   // 'A' promoted to int, Outputs: int
```

---

## **Wrapping Up**

Understanding literals and how Java handles type casting, conversion, and promotion is fundamental to manipulating data effectively. These concepts are the building blocks for more advanced topics like generics, collections, and streams.

**Curious to Explore More?**

- **Data Type Overflow:** What happens when you exceed the limits of a data type?
- **Generics and Type Erasure:** How do type parameters work in Java?
- **Operator Overloading:** Why doesn't Java support it, and how does it relate to types?

Feel free to ask, and let's continue this journey into Java's type system!